// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: subdistrict.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetAllSubdistricts
type GetAllSubdistrictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*SubdistrictData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllSubdistrictsResponse) Reset() {
	*x = GetAllSubdistrictsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSubdistrictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSubdistrictsResponse) ProtoMessage() {}

func (x *GetAllSubdistrictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSubdistrictsResponse.ProtoReflect.Descriptor instead.
func (*GetAllSubdistrictsResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllSubdistrictsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAllSubdistrictsResponse) GetData() []*SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetSubdistrictByID
type GetSubdistrictByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetSubdistrictByIDInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetSubdistrictByIDRequest) Reset() {
	*x = GetSubdistrictByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictByIDRequest) ProtoMessage() {}

func (x *GetSubdistrictByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictByIDRequest.ProtoReflect.Descriptor instead.
func (*GetSubdistrictByIDRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{1}
}

func (x *GetSubdistrictByIDRequest) GetRequest() *GetSubdistrictByIDInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetSubdistrictByIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubdistrictByIDInput) Reset() {
	*x = GetSubdistrictByIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictByIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictByIDInput) ProtoMessage() {}

func (x *GetSubdistrictByIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictByIDInput.ProtoReflect.Descriptor instead.
func (*GetSubdistrictByIDInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{2}
}

func (x *GetSubdistrictByIDInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSubdistrictByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SubdistrictData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubdistrictByIDResponse) Reset() {
	*x = GetSubdistrictByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictByIDResponse) ProtoMessage() {}

func (x *GetSubdistrictByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictByIDResponse.ProtoReflect.Descriptor instead.
func (*GetSubdistrictByIDResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubdistrictByIDResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetSubdistrictByIDResponse) GetData() *SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetSubdistrictsByIDs
type GetSubdistrictsByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetSubdistrictsByIDsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetSubdistrictsByIDsRequest) Reset() {
	*x = GetSubdistrictsByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictsByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictsByIDsRequest) ProtoMessage() {}

func (x *GetSubdistrictsByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictsByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetSubdistrictsByIDsRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{4}
}

func (x *GetSubdistrictsByIDsRequest) GetRequest() *GetSubdistrictsByIDsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetSubdistrictsByIDsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubdistrictsByIDsInput) Reset() {
	*x = GetSubdistrictsByIDsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictsByIDsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictsByIDsInput) ProtoMessage() {}

func (x *GetSubdistrictsByIDsInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictsByIDsInput.ProtoReflect.Descriptor instead.
func (*GetSubdistrictsByIDsInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubdistrictsByIDsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetSubdistrictsByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*SubdistrictData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubdistrictsByIDsResponse) Reset() {
	*x = GetSubdistrictsByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubdistrictsByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubdistrictsByIDsResponse) ProtoMessage() {}

func (x *GetSubdistrictsByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubdistrictsByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetSubdistrictsByIDsResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubdistrictsByIDsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetSubdistrictsByIDsResponse) GetData() []*SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertSubdistrict
type InsertSubdistrictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *InsertSubdistrictInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertSubdistrictRequest) Reset() {
	*x = InsertSubdistrictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSubdistrictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSubdistrictRequest) ProtoMessage() {}

func (x *InsertSubdistrictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSubdistrictRequest.ProtoReflect.Descriptor instead.
func (*InsertSubdistrictRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{7}
}

func (x *InsertSubdistrictRequest) GetRequest() *InsertSubdistrictInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertSubdistrictInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubdistrictID   string `protobuf:"bytes,1,opt,name=subdistrictID,proto3" json:"subdistrictID,omitempty"`
	SubdistrictName string `protobuf:"bytes,2,opt,name=subdistrictName,proto3" json:"subdistrictName,omitempty"`
	SubdistrictType string `protobuf:"bytes,3,opt,name=subdistrictType,proto3" json:"subdistrictType,omitempty"`
	PostalCode      string `protobuf:"bytes,4,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	DistrictID      string `protobuf:"bytes,5,opt,name=districtID,proto3" json:"districtID,omitempty"`
}

func (x *InsertSubdistrictInput) Reset() {
	*x = InsertSubdistrictInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSubdistrictInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSubdistrictInput) ProtoMessage() {}

func (x *InsertSubdistrictInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSubdistrictInput.ProtoReflect.Descriptor instead.
func (*InsertSubdistrictInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{8}
}

func (x *InsertSubdistrictInput) GetSubdistrictID() string {
	if x != nil {
		return x.SubdistrictID
	}
	return ""
}

func (x *InsertSubdistrictInput) GetSubdistrictName() string {
	if x != nil {
		return x.SubdistrictName
	}
	return ""
}

func (x *InsertSubdistrictInput) GetSubdistrictType() string {
	if x != nil {
		return x.SubdistrictType
	}
	return ""
}

func (x *InsertSubdistrictInput) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *InsertSubdistrictInput) GetDistrictID() string {
	if x != nil {
		return x.DistrictID
	}
	return ""
}

type InsertSubdistrictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SubdistrictData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertSubdistrictResponse) Reset() {
	*x = InsertSubdistrictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSubdistrictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSubdistrictResponse) ProtoMessage() {}

func (x *InsertSubdistrictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSubdistrictResponse.ProtoReflect.Descriptor instead.
func (*InsertSubdistrictResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{9}
}

func (x *InsertSubdistrictResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertSubdistrictResponse) GetData() *SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertSubdistricts
type InsertSubdistrictsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*InsertSubdistrictInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertSubdistrictsRequest) Reset() {
	*x = InsertSubdistrictsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSubdistrictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSubdistrictsRequest) ProtoMessage() {}

func (x *InsertSubdistrictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSubdistrictsRequest.ProtoReflect.Descriptor instead.
func (*InsertSubdistrictsRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{10}
}

func (x *InsertSubdistrictsRequest) GetRequest() []*InsertSubdistrictInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertSubdistrictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*SubdistrictData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertSubdistrictsResponse) Reset() {
	*x = InsertSubdistrictsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertSubdistrictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertSubdistrictsResponse) ProtoMessage() {}

func (x *InsertSubdistrictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertSubdistrictsResponse.ProtoReflect.Descriptor instead.
func (*InsertSubdistrictsResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{11}
}

func (x *InsertSubdistrictsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertSubdistrictsResponse) GetData() []*SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateSubdistrict
type UpdateSubdistrictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *UpdateSubdistrictInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateSubdistrictRequest) Reset() {
	*x = UpdateSubdistrictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubdistrictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubdistrictRequest) ProtoMessage() {}

func (x *UpdateSubdistrictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubdistrictRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubdistrictRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSubdistrictRequest) GetRequest() *UpdateSubdistrictInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateSubdistrictInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubdistrictID   string          `protobuf:"bytes,1,opt,name=subdistrictID,proto3" json:"subdistrictID,omitempty"`
	SubdistrictName *OptionalString `protobuf:"bytes,2,opt,name=subdistrictName,proto3" json:"subdistrictName,omitempty"`
	SubdistrictType *OptionalString `protobuf:"bytes,3,opt,name=subdistrictType,proto3" json:"subdistrictType,omitempty"`
	PostalCode      *OptionalString `protobuf:"bytes,4,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	DistrictID      *OptionalString `protobuf:"bytes,5,opt,name=districtID,proto3" json:"districtID,omitempty"`
}

func (x *UpdateSubdistrictInput) Reset() {
	*x = UpdateSubdistrictInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubdistrictInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubdistrictInput) ProtoMessage() {}

func (x *UpdateSubdistrictInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubdistrictInput.ProtoReflect.Descriptor instead.
func (*UpdateSubdistrictInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSubdistrictInput) GetSubdistrictID() string {
	if x != nil {
		return x.SubdistrictID
	}
	return ""
}

func (x *UpdateSubdistrictInput) GetSubdistrictName() *OptionalString {
	if x != nil {
		return x.SubdistrictName
	}
	return nil
}

func (x *UpdateSubdistrictInput) GetSubdistrictType() *OptionalString {
	if x != nil {
		return x.SubdistrictType
	}
	return nil
}

func (x *UpdateSubdistrictInput) GetPostalCode() *OptionalString {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *UpdateSubdistrictInput) GetDistrictID() *OptionalString {
	if x != nil {
		return x.DistrictID
	}
	return nil
}

type UpdateSubdistrictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SubdistrictData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateSubdistrictResponse) Reset() {
	*x = UpdateSubdistrictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubdistrictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubdistrictResponse) ProtoMessage() {}

func (x *UpdateSubdistrictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubdistrictResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubdistrictResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSubdistrictResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateSubdistrictResponse) GetData() *SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateSubdistricts
type UpdateSubdistrictsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*UpdateSubdistrictInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateSubdistrictsRequest) Reset() {
	*x = UpdateSubdistrictsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubdistrictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubdistrictsRequest) ProtoMessage() {}

func (x *UpdateSubdistrictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubdistrictsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubdistrictsRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSubdistrictsRequest) GetRequest() []*UpdateSubdistrictInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateSubdistrictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*SubdistrictData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateSubdistrictsResponse) Reset() {
	*x = UpdateSubdistrictsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubdistrictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubdistrictsResponse) ProtoMessage() {}

func (x *UpdateSubdistrictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubdistrictsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubdistrictsResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSubdistrictsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateSubdistrictsResponse) GetData() []*SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteSubdistrict
type DeleteSubdistrictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteSubdistrictInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteSubdistrictRequest) Reset() {
	*x = DeleteSubdistrictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictRequest) ProtoMessage() {}

func (x *DeleteSubdistrictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteSubdistrictRequest) GetRequest() *DeleteSubdistrictInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteSubdistrictInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubdistrictInput) Reset() {
	*x = DeleteSubdistrictInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictInput) ProtoMessage() {}

func (x *DeleteSubdistrictInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictInput.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteSubdistrictInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSubdistrictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *SubdistrictData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteSubdistrictResponse) Reset() {
	*x = DeleteSubdistrictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictResponse) ProtoMessage() {}

func (x *DeleteSubdistrictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteSubdistrictResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteSubdistrictResponse) GetData() *SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteSubdistricts
type DeleteSubdistrictsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteSubdistrictsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteSubdistrictsRequest) Reset() {
	*x = DeleteSubdistrictsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictsRequest) ProtoMessage() {}

func (x *DeleteSubdistrictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictsRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictsRequest) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteSubdistrictsRequest) GetRequest() *DeleteSubdistrictsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteSubdistrictsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubdistrictsInput) Reset() {
	*x = DeleteSubdistrictsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictsInput) ProtoMessage() {}

func (x *DeleteSubdistrictsInput) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictsInput.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictsInput) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSubdistrictsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteSubdistrictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*SubdistrictData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteSubdistrictsResponse) Reset() {
	*x = DeleteSubdistrictsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubdistrictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubdistrictsResponse) ProtoMessage() {}

func (x *DeleteSubdistrictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubdistrictsResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubdistrictsResponse) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteSubdistrictsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteSubdistrictsResponse) GetData() []*SubdistrictData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Base Data
type SubdistrictData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubdistrictID   string `protobuf:"bytes,1,opt,name=subdistrictID,proto3" json:"subdistrictID,omitempty"`
	SubdistrictName string `protobuf:"bytes,2,opt,name=subdistrictName,proto3" json:"subdistrictName,omitempty"`
	SubdistrictType string `protobuf:"bytes,3,opt,name=subdistrictType,proto3" json:"subdistrictType,omitempty"`
	PostalCode      string `protobuf:"bytes,4,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	DistrictID      string `protobuf:"bytes,5,opt,name=districtID,proto3" json:"districtID,omitempty"`
}

func (x *SubdistrictData) Reset() {
	*x = SubdistrictData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubdistrictData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubdistrictData) ProtoMessage() {}

func (x *SubdistrictData) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubdistrictData.ProtoReflect.Descriptor instead.
func (*SubdistrictData) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{23}
}

func (x *SubdistrictData) GetSubdistrictID() string {
	if x != nil {
		return x.SubdistrictID
	}
	return ""
}

func (x *SubdistrictData) GetSubdistrictName() string {
	if x != nil {
		return x.SubdistrictName
	}
	return ""
}

func (x *SubdistrictData) GetSubdistrictType() string {
	if x != nil {
		return x.SubdistrictType
	}
	return ""
}

func (x *SubdistrictData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *SubdistrictData) GetDistrictID() string {
	if x != nil {
		return x.DistrictID
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{24}
}

func (x *Header) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Header) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

type OptionalString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	HasSet bool   `protobuf:"varint,2,opt,name=hasSet,proto3" json:"hasSet,omitempty"`
}

func (x *OptionalString) Reset() {
	*x = OptionalString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subdistrict_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalString) ProtoMessage() {}

func (x *OptionalString) ProtoReflect() protoreflect.Message {
	mi := &file_subdistrict_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalString.ProtoReflect.Descriptor instead.
func (*OptionalString) Descriptor() ([]byte, []int) {
	return file_subdistrict_proto_rawDescGZIP(), []int{25}
}

func (x *OptionalString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionalString) GetHasSet() bool {
	if x != nil {
		return x.HasSet
	}
	return false
}

var File_subdistrict_proto protoreflect.FileDescriptor

var file_subdistrict_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x18,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x19,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x59, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc6, 0x02, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a,
	0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x5a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x7a, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x44, 0x22, 0x3a,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x0e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x32, 0xb2, 0x07, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x27, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x75,
	0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x26,
	0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subdistrict_proto_rawDescOnce sync.Once
	file_subdistrict_proto_rawDescData = file_subdistrict_proto_rawDesc
)

func file_subdistrict_proto_rawDescGZIP() []byte {
	file_subdistrict_proto_rawDescOnce.Do(func() {
		file_subdistrict_proto_rawDescData = protoimpl.X.CompressGZIP(file_subdistrict_proto_rawDescData)
	})
	return file_subdistrict_proto_rawDescData
}

var file_subdistrict_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_subdistrict_proto_goTypes = []interface{}{
	(*GetAllSubdistrictsResponse)(nil),   // 0: subdistrict.GetAllSubdistrictsResponse
	(*GetSubdistrictByIDRequest)(nil),    // 1: subdistrict.GetSubdistrictByIDRequest
	(*GetSubdistrictByIDInput)(nil),      // 2: subdistrict.GetSubdistrictByIDInput
	(*GetSubdistrictByIDResponse)(nil),   // 3: subdistrict.GetSubdistrictByIDResponse
	(*GetSubdistrictsByIDsRequest)(nil),  // 4: subdistrict.GetSubdistrictsByIDsRequest
	(*GetSubdistrictsByIDsInput)(nil),    // 5: subdistrict.GetSubdistrictsByIDsInput
	(*GetSubdistrictsByIDsResponse)(nil), // 6: subdistrict.GetSubdistrictsByIDsResponse
	(*InsertSubdistrictRequest)(nil),     // 7: subdistrict.InsertSubdistrictRequest
	(*InsertSubdistrictInput)(nil),       // 8: subdistrict.InsertSubdistrictInput
	(*InsertSubdistrictResponse)(nil),    // 9: subdistrict.InsertSubdistrictResponse
	(*InsertSubdistrictsRequest)(nil),    // 10: subdistrict.InsertSubdistrictsRequest
	(*InsertSubdistrictsResponse)(nil),   // 11: subdistrict.InsertSubdistrictsResponse
	(*UpdateSubdistrictRequest)(nil),     // 12: subdistrict.UpdateSubdistrictRequest
	(*UpdateSubdistrictInput)(nil),       // 13: subdistrict.UpdateSubdistrictInput
	(*UpdateSubdistrictResponse)(nil),    // 14: subdistrict.UpdateSubdistrictResponse
	(*UpdateSubdistrictsRequest)(nil),    // 15: subdistrict.UpdateSubdistrictsRequest
	(*UpdateSubdistrictsResponse)(nil),   // 16: subdistrict.UpdateSubdistrictsResponse
	(*DeleteSubdistrictRequest)(nil),     // 17: subdistrict.DeleteSubdistrictRequest
	(*DeleteSubdistrictInput)(nil),       // 18: subdistrict.DeleteSubdistrictInput
	(*DeleteSubdistrictResponse)(nil),    // 19: subdistrict.DeleteSubdistrictResponse
	(*DeleteSubdistrictsRequest)(nil),    // 20: subdistrict.DeleteSubdistrictsRequest
	(*DeleteSubdistrictsInput)(nil),      // 21: subdistrict.DeleteSubdistrictsInput
	(*DeleteSubdistrictsResponse)(nil),   // 22: subdistrict.DeleteSubdistrictsResponse
	(*SubdistrictData)(nil),              // 23: subdistrict.SubdistrictData
	(*Header)(nil),                       // 24: subdistrict.Header
	(*OptionalString)(nil),               // 25: subdistrict.OptionalString
	(*emptypb.Empty)(nil),                // 26: google.protobuf.Empty
}
var file_subdistrict_proto_depIdxs = []int32{
	24, // 0: subdistrict.GetAllSubdistrictsResponse.header:type_name -> subdistrict.Header
	23, // 1: subdistrict.GetAllSubdistrictsResponse.data:type_name -> subdistrict.SubdistrictData
	2,  // 2: subdistrict.GetSubdistrictByIDRequest.request:type_name -> subdistrict.GetSubdistrictByIDInput
	24, // 3: subdistrict.GetSubdistrictByIDResponse.header:type_name -> subdistrict.Header
	23, // 4: subdistrict.GetSubdistrictByIDResponse.data:type_name -> subdistrict.SubdistrictData
	5,  // 5: subdistrict.GetSubdistrictsByIDsRequest.request:type_name -> subdistrict.GetSubdistrictsByIDsInput
	24, // 6: subdistrict.GetSubdistrictsByIDsResponse.header:type_name -> subdistrict.Header
	23, // 7: subdistrict.GetSubdistrictsByIDsResponse.data:type_name -> subdistrict.SubdistrictData
	8,  // 8: subdistrict.InsertSubdistrictRequest.request:type_name -> subdistrict.InsertSubdistrictInput
	24, // 9: subdistrict.InsertSubdistrictResponse.header:type_name -> subdistrict.Header
	23, // 10: subdistrict.InsertSubdistrictResponse.data:type_name -> subdistrict.SubdistrictData
	8,  // 11: subdistrict.InsertSubdistrictsRequest.request:type_name -> subdistrict.InsertSubdistrictInput
	24, // 12: subdistrict.InsertSubdistrictsResponse.header:type_name -> subdistrict.Header
	23, // 13: subdistrict.InsertSubdistrictsResponse.data:type_name -> subdistrict.SubdistrictData
	13, // 14: subdistrict.UpdateSubdistrictRequest.request:type_name -> subdistrict.UpdateSubdistrictInput
	25, // 15: subdistrict.UpdateSubdistrictInput.subdistrictName:type_name -> subdistrict.OptionalString
	25, // 16: subdistrict.UpdateSubdistrictInput.subdistrictType:type_name -> subdistrict.OptionalString
	25, // 17: subdistrict.UpdateSubdistrictInput.postalCode:type_name -> subdistrict.OptionalString
	25, // 18: subdistrict.UpdateSubdistrictInput.districtID:type_name -> subdistrict.OptionalString
	24, // 19: subdistrict.UpdateSubdistrictResponse.header:type_name -> subdistrict.Header
	23, // 20: subdistrict.UpdateSubdistrictResponse.data:type_name -> subdistrict.SubdistrictData
	13, // 21: subdistrict.UpdateSubdistrictsRequest.request:type_name -> subdistrict.UpdateSubdistrictInput
	24, // 22: subdistrict.UpdateSubdistrictsResponse.header:type_name -> subdistrict.Header
	23, // 23: subdistrict.UpdateSubdistrictsResponse.data:type_name -> subdistrict.SubdistrictData
	18, // 24: subdistrict.DeleteSubdistrictRequest.request:type_name -> subdistrict.DeleteSubdistrictInput
	24, // 25: subdistrict.DeleteSubdistrictResponse.header:type_name -> subdistrict.Header
	23, // 26: subdistrict.DeleteSubdistrictResponse.data:type_name -> subdistrict.SubdistrictData
	21, // 27: subdistrict.DeleteSubdistrictsRequest.request:type_name -> subdistrict.DeleteSubdistrictsInput
	24, // 28: subdistrict.DeleteSubdistrictsResponse.header:type_name -> subdistrict.Header
	23, // 29: subdistrict.DeleteSubdistrictsResponse.data:type_name -> subdistrict.SubdistrictData
	26, // 30: subdistrict.SubdistrictService.GetAllSubdistricts:input_type -> google.protobuf.Empty
	1,  // 31: subdistrict.SubdistrictService.GetSubdistrictByID:input_type -> subdistrict.GetSubdistrictByIDRequest
	4,  // 32: subdistrict.SubdistrictService.GetSubdistrictsByIDs:input_type -> subdistrict.GetSubdistrictsByIDsRequest
	7,  // 33: subdistrict.SubdistrictService.InsertSubdistrict:input_type -> subdistrict.InsertSubdistrictRequest
	10, // 34: subdistrict.SubdistrictService.InsertSubdistricts:input_type -> subdistrict.InsertSubdistrictsRequest
	12, // 35: subdistrict.SubdistrictService.UpdateSubdistrict:input_type -> subdistrict.UpdateSubdistrictRequest
	15, // 36: subdistrict.SubdistrictService.UpdateSubdistricts:input_type -> subdistrict.UpdateSubdistrictsRequest
	17, // 37: subdistrict.SubdistrictService.DeleteSubdistrict:input_type -> subdistrict.DeleteSubdistrictRequest
	20, // 38: subdistrict.SubdistrictService.DeleteSubdistricts:input_type -> subdistrict.DeleteSubdistrictsRequest
	0,  // 39: subdistrict.SubdistrictService.GetAllSubdistricts:output_type -> subdistrict.GetAllSubdistrictsResponse
	3,  // 40: subdistrict.SubdistrictService.GetSubdistrictByID:output_type -> subdistrict.GetSubdistrictByIDResponse
	6,  // 41: subdistrict.SubdistrictService.GetSubdistrictsByIDs:output_type -> subdistrict.GetSubdistrictsByIDsResponse
	9,  // 42: subdistrict.SubdistrictService.InsertSubdistrict:output_type -> subdistrict.InsertSubdistrictResponse
	11, // 43: subdistrict.SubdistrictService.InsertSubdistricts:output_type -> subdistrict.InsertSubdistrictsResponse
	14, // 44: subdistrict.SubdistrictService.UpdateSubdistrict:output_type -> subdistrict.UpdateSubdistrictResponse
	16, // 45: subdistrict.SubdistrictService.UpdateSubdistricts:output_type -> subdistrict.UpdateSubdistrictsResponse
	19, // 46: subdistrict.SubdistrictService.DeleteSubdistrict:output_type -> subdistrict.DeleteSubdistrictResponse
	22, // 47: subdistrict.SubdistrictService.DeleteSubdistricts:output_type -> subdistrict.DeleteSubdistrictsResponse
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_subdistrict_proto_init() }
func file_subdistrict_proto_init() {
	if File_subdistrict_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subdistrict_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSubdistrictsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictByIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictsByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictsByIDsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubdistrictsByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSubdistrictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSubdistrictInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSubdistrictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSubdistrictsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertSubdistrictsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubdistrictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubdistrictInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubdistrictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubdistrictsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubdistrictsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubdistrictsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubdistrictData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subdistrict_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subdistrict_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subdistrict_proto_goTypes,
		DependencyIndexes: file_subdistrict_proto_depIdxs,
		MessageInfos:      file_subdistrict_proto_msgTypes,
	}.Build()
	File_subdistrict_proto = out.File
	file_subdistrict_proto_rawDesc = nil
	file_subdistrict_proto_goTypes = nil
	file_subdistrict_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubdistrictServiceClient is the client API for SubdistrictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubdistrictServiceClient interface {
	GetAllSubdistricts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSubdistrictsResponse, error)
	GetSubdistrictByID(ctx context.Context, in *GetSubdistrictByIDRequest, opts ...grpc.CallOption) (*GetSubdistrictByIDResponse, error)
	GetSubdistrictsByIDs(ctx context.Context, in *GetSubdistrictsByIDsRequest, opts ...grpc.CallOption) (*GetSubdistrictsByIDsResponse, error)
	InsertSubdistrict(ctx context.Context, in *InsertSubdistrictRequest, opts ...grpc.CallOption) (*InsertSubdistrictResponse, error)
	InsertSubdistricts(ctx context.Context, in *InsertSubdistrictsRequest, opts ...grpc.CallOption) (*InsertSubdistrictsResponse, error)
	UpdateSubdistrict(ctx context.Context, in *UpdateSubdistrictRequest, opts ...grpc.CallOption) (*UpdateSubdistrictResponse, error)
	UpdateSubdistricts(ctx context.Context, in *UpdateSubdistrictsRequest, opts ...grpc.CallOption) (*UpdateSubdistrictsResponse, error)
	DeleteSubdistrict(ctx context.Context, in *DeleteSubdistrictRequest, opts ...grpc.CallOption) (*DeleteSubdistrictResponse, error)
	DeleteSubdistricts(ctx context.Context, in *DeleteSubdistrictsRequest, opts ...grpc.CallOption) (*DeleteSubdistrictsResponse, error)
}

type subdistrictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubdistrictServiceClient(cc grpc.ClientConnInterface) SubdistrictServiceClient {
	return &subdistrictServiceClient{cc}
}

func (c *subdistrictServiceClient) GetAllSubdistricts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSubdistrictsResponse, error) {
	out := new(GetAllSubdistrictsResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/GetAllSubdistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) GetSubdistrictByID(ctx context.Context, in *GetSubdistrictByIDRequest, opts ...grpc.CallOption) (*GetSubdistrictByIDResponse, error) {
	out := new(GetSubdistrictByIDResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/GetSubdistrictByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) GetSubdistrictsByIDs(ctx context.Context, in *GetSubdistrictsByIDsRequest, opts ...grpc.CallOption) (*GetSubdistrictsByIDsResponse, error) {
	out := new(GetSubdistrictsByIDsResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/GetSubdistrictsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) InsertSubdistrict(ctx context.Context, in *InsertSubdistrictRequest, opts ...grpc.CallOption) (*InsertSubdistrictResponse, error) {
	out := new(InsertSubdistrictResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/InsertSubdistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) InsertSubdistricts(ctx context.Context, in *InsertSubdistrictsRequest, opts ...grpc.CallOption) (*InsertSubdistrictsResponse, error) {
	out := new(InsertSubdistrictsResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/InsertSubdistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) UpdateSubdistrict(ctx context.Context, in *UpdateSubdistrictRequest, opts ...grpc.CallOption) (*UpdateSubdistrictResponse, error) {
	out := new(UpdateSubdistrictResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/UpdateSubdistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) UpdateSubdistricts(ctx context.Context, in *UpdateSubdistrictsRequest, opts ...grpc.CallOption) (*UpdateSubdistrictsResponse, error) {
	out := new(UpdateSubdistrictsResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/UpdateSubdistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) DeleteSubdistrict(ctx context.Context, in *DeleteSubdistrictRequest, opts ...grpc.CallOption) (*DeleteSubdistrictResponse, error) {
	out := new(DeleteSubdistrictResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/DeleteSubdistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subdistrictServiceClient) DeleteSubdistricts(ctx context.Context, in *DeleteSubdistrictsRequest, opts ...grpc.CallOption) (*DeleteSubdistrictsResponse, error) {
	out := new(DeleteSubdistrictsResponse)
	err := c.cc.Invoke(ctx, "/subdistrict.SubdistrictService/DeleteSubdistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubdistrictServiceServer is the server API for SubdistrictService service.
type SubdistrictServiceServer interface {
	GetAllSubdistricts(context.Context, *emptypb.Empty) (*GetAllSubdistrictsResponse, error)
	GetSubdistrictByID(context.Context, *GetSubdistrictByIDRequest) (*GetSubdistrictByIDResponse, error)
	GetSubdistrictsByIDs(context.Context, *GetSubdistrictsByIDsRequest) (*GetSubdistrictsByIDsResponse, error)
	InsertSubdistrict(context.Context, *InsertSubdistrictRequest) (*InsertSubdistrictResponse, error)
	InsertSubdistricts(context.Context, *InsertSubdistrictsRequest) (*InsertSubdistrictsResponse, error)
	UpdateSubdistrict(context.Context, *UpdateSubdistrictRequest) (*UpdateSubdistrictResponse, error)
	UpdateSubdistricts(context.Context, *UpdateSubdistrictsRequest) (*UpdateSubdistrictsResponse, error)
	DeleteSubdistrict(context.Context, *DeleteSubdistrictRequest) (*DeleteSubdistrictResponse, error)
	DeleteSubdistricts(context.Context, *DeleteSubdistrictsRequest) (*DeleteSubdistrictsResponse, error)
}

// UnimplementedSubdistrictServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubdistrictServiceServer struct {
}

func (*UnimplementedSubdistrictServiceServer) GetAllSubdistricts(context.Context, *emptypb.Empty) (*GetAllSubdistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSubdistricts not implemented")
}
func (*UnimplementedSubdistrictServiceServer) GetSubdistrictByID(context.Context, *GetSubdistrictByIDRequest) (*GetSubdistrictByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubdistrictByID not implemented")
}
func (*UnimplementedSubdistrictServiceServer) GetSubdistrictsByIDs(context.Context, *GetSubdistrictsByIDsRequest) (*GetSubdistrictsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubdistrictsByIDs not implemented")
}
func (*UnimplementedSubdistrictServiceServer) InsertSubdistrict(context.Context, *InsertSubdistrictRequest) (*InsertSubdistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSubdistrict not implemented")
}
func (*UnimplementedSubdistrictServiceServer) InsertSubdistricts(context.Context, *InsertSubdistrictsRequest) (*InsertSubdistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSubdistricts not implemented")
}
func (*UnimplementedSubdistrictServiceServer) UpdateSubdistrict(context.Context, *UpdateSubdistrictRequest) (*UpdateSubdistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubdistrict not implemented")
}
func (*UnimplementedSubdistrictServiceServer) UpdateSubdistricts(context.Context, *UpdateSubdistrictsRequest) (*UpdateSubdistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubdistricts not implemented")
}
func (*UnimplementedSubdistrictServiceServer) DeleteSubdistrict(context.Context, *DeleteSubdistrictRequest) (*DeleteSubdistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubdistrict not implemented")
}
func (*UnimplementedSubdistrictServiceServer) DeleteSubdistricts(context.Context, *DeleteSubdistrictsRequest) (*DeleteSubdistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubdistricts not implemented")
}

func RegisterSubdistrictServiceServer(s *grpc.Server, srv SubdistrictServiceServer) {
	s.RegisterService(&_SubdistrictService_serviceDesc, srv)
}

func _SubdistrictService_GetAllSubdistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).GetAllSubdistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/GetAllSubdistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).GetAllSubdistricts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_GetSubdistrictByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubdistrictByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).GetSubdistrictByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/GetSubdistrictByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).GetSubdistrictByID(ctx, req.(*GetSubdistrictByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_GetSubdistrictsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubdistrictsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).GetSubdistrictsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/GetSubdistrictsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).GetSubdistrictsByIDs(ctx, req.(*GetSubdistrictsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_InsertSubdistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSubdistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).InsertSubdistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/InsertSubdistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).InsertSubdistrict(ctx, req.(*InsertSubdistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_InsertSubdistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSubdistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).InsertSubdistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/InsertSubdistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).InsertSubdistricts(ctx, req.(*InsertSubdistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_UpdateSubdistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubdistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).UpdateSubdistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/UpdateSubdistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).UpdateSubdistrict(ctx, req.(*UpdateSubdistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_UpdateSubdistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubdistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).UpdateSubdistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/UpdateSubdistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).UpdateSubdistricts(ctx, req.(*UpdateSubdistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_DeleteSubdistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubdistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).DeleteSubdistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/DeleteSubdistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).DeleteSubdistrict(ctx, req.(*DeleteSubdistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubdistrictService_DeleteSubdistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubdistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubdistrictServiceServer).DeleteSubdistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subdistrict.SubdistrictService/DeleteSubdistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubdistrictServiceServer).DeleteSubdistricts(ctx, req.(*DeleteSubdistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubdistrictService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subdistrict.SubdistrictService",
	HandlerType: (*SubdistrictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSubdistricts",
			Handler:    _SubdistrictService_GetAllSubdistricts_Handler,
		},
		{
			MethodName: "GetSubdistrictByID",
			Handler:    _SubdistrictService_GetSubdistrictByID_Handler,
		},
		{
			MethodName: "GetSubdistrictsByIDs",
			Handler:    _SubdistrictService_GetSubdistrictsByIDs_Handler,
		},
		{
			MethodName: "InsertSubdistrict",
			Handler:    _SubdistrictService_InsertSubdistrict_Handler,
		},
		{
			MethodName: "InsertSubdistricts",
			Handler:    _SubdistrictService_InsertSubdistricts_Handler,
		},
		{
			MethodName: "UpdateSubdistrict",
			Handler:    _SubdistrictService_UpdateSubdistrict_Handler,
		},
		{
			MethodName: "UpdateSubdistricts",
			Handler:    _SubdistrictService_UpdateSubdistricts_Handler,
		},
		{
			MethodName: "DeleteSubdistrict",
			Handler:    _SubdistrictService_DeleteSubdistrict_Handler,
		},
		{
			MethodName: "DeleteSubdistricts",
			Handler:    _SubdistrictService_DeleteSubdistricts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subdistrict.proto",
}
