// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: geoloc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetAllGeolocs
type GetAllGeolocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*GeolocData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllGeolocsResponse) Reset() {
	*x = GetAllGeolocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGeolocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGeolocsResponse) ProtoMessage() {}

func (x *GetAllGeolocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGeolocsResponse.ProtoReflect.Descriptor instead.
func (*GetAllGeolocsResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllGeolocsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAllGeolocsResponse) GetData() []*GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetGeolocByID
type GetGeolocByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetGeolocByIDInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetGeolocByIDRequest) Reset() {
	*x = GetGeolocByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocByIDRequest) ProtoMessage() {}

func (x *GetGeolocByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocByIDRequest.ProtoReflect.Descriptor instead.
func (*GetGeolocByIDRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{1}
}

func (x *GetGeolocByIDRequest) GetRequest() *GetGeolocByIDInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetGeolocByIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGeolocByIDInput) Reset() {
	*x = GetGeolocByIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocByIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocByIDInput) ProtoMessage() {}

func (x *GetGeolocByIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocByIDInput.ProtoReflect.Descriptor instead.
func (*GetGeolocByIDInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{2}
}

func (x *GetGeolocByIDInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGeolocByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GeolocData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetGeolocByIDResponse) Reset() {
	*x = GetGeolocByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocByIDResponse) ProtoMessage() {}

func (x *GetGeolocByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocByIDResponse.ProtoReflect.Descriptor instead.
func (*GetGeolocByIDResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{3}
}

func (x *GetGeolocByIDResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetGeolocByIDResponse) GetData() *GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetGeolocsByIDs
type GetGeolocsByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetGeolocsByIDsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetGeolocsByIDsRequest) Reset() {
	*x = GetGeolocsByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocsByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocsByIDsRequest) ProtoMessage() {}

func (x *GetGeolocsByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocsByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetGeolocsByIDsRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{4}
}

func (x *GetGeolocsByIDsRequest) GetRequest() *GetGeolocsByIDsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetGeolocsByIDsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGeolocsByIDsInput) Reset() {
	*x = GetGeolocsByIDsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocsByIDsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocsByIDsInput) ProtoMessage() {}

func (x *GetGeolocsByIDsInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocsByIDsInput.ProtoReflect.Descriptor instead.
func (*GetGeolocsByIDsInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{5}
}

func (x *GetGeolocsByIDsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetGeolocsByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*GeolocData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetGeolocsByIDsResponse) Reset() {
	*x = GetGeolocsByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeolocsByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeolocsByIDsResponse) ProtoMessage() {}

func (x *GetGeolocsByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeolocsByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetGeolocsByIDsResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{6}
}

func (x *GetGeolocsByIDsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetGeolocsByIDsResponse) GetData() []*GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertGeoloc
type InsertGeolocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *InsertGeolocInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertGeolocRequest) Reset() {
	*x = InsertGeolocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGeolocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGeolocRequest) ProtoMessage() {}

func (x *InsertGeolocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGeolocRequest.ProtoReflect.Descriptor instead.
func (*InsertGeolocRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{7}
}

func (x *InsertGeolocRequest) GetRequest() *InsertGeolocInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertGeolocInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeolocID    string `protobuf:"bytes,1,opt,name=geolocID,proto3" json:"geolocID,omitempty"`
	Latitude    string `protobuf:"bytes,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   string `protobuf:"bytes,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Coordinates string `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *InsertGeolocInput) Reset() {
	*x = InsertGeolocInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGeolocInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGeolocInput) ProtoMessage() {}

func (x *InsertGeolocInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGeolocInput.ProtoReflect.Descriptor instead.
func (*InsertGeolocInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{8}
}

func (x *InsertGeolocInput) GetGeolocID() string {
	if x != nil {
		return x.GeolocID
	}
	return ""
}

func (x *InsertGeolocInput) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *InsertGeolocInput) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *InsertGeolocInput) GetCoordinates() string {
	if x != nil {
		return x.Coordinates
	}
	return ""
}

type InsertGeolocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GeolocData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertGeolocResponse) Reset() {
	*x = InsertGeolocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGeolocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGeolocResponse) ProtoMessage() {}

func (x *InsertGeolocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGeolocResponse.ProtoReflect.Descriptor instead.
func (*InsertGeolocResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{9}
}

func (x *InsertGeolocResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertGeolocResponse) GetData() *GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertGeolocs
type InsertGeolocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*InsertGeolocInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertGeolocsRequest) Reset() {
	*x = InsertGeolocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGeolocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGeolocsRequest) ProtoMessage() {}

func (x *InsertGeolocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGeolocsRequest.ProtoReflect.Descriptor instead.
func (*InsertGeolocsRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{10}
}

func (x *InsertGeolocsRequest) GetRequest() []*InsertGeolocInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertGeolocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*GeolocData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertGeolocsResponse) Reset() {
	*x = InsertGeolocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertGeolocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertGeolocsResponse) ProtoMessage() {}

func (x *InsertGeolocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertGeolocsResponse.ProtoReflect.Descriptor instead.
func (*InsertGeolocsResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{11}
}

func (x *InsertGeolocsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertGeolocsResponse) GetData() []*GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateGeoloc
type UpdateGeolocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *UpdateGeolocInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateGeolocRequest) Reset() {
	*x = UpdateGeolocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeolocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeolocRequest) ProtoMessage() {}

func (x *UpdateGeolocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeolocRequest.ProtoReflect.Descriptor instead.
func (*UpdateGeolocRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateGeolocRequest) GetRequest() *UpdateGeolocInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateGeolocInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeolocID    string          `protobuf:"bytes,1,opt,name=geolocID,proto3" json:"geolocID,omitempty"`
	Latitude    *OptionalString `protobuf:"bytes,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   *OptionalString `protobuf:"bytes,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Coordinates *OptionalString `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *UpdateGeolocInput) Reset() {
	*x = UpdateGeolocInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeolocInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeolocInput) ProtoMessage() {}

func (x *UpdateGeolocInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeolocInput.ProtoReflect.Descriptor instead.
func (*UpdateGeolocInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateGeolocInput) GetGeolocID() string {
	if x != nil {
		return x.GeolocID
	}
	return ""
}

func (x *UpdateGeolocInput) GetLatitude() *OptionalString {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *UpdateGeolocInput) GetLongitude() *OptionalString {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *UpdateGeolocInput) GetCoordinates() *OptionalString {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type UpdateGeolocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GeolocData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateGeolocResponse) Reset() {
	*x = UpdateGeolocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeolocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeolocResponse) ProtoMessage() {}

func (x *UpdateGeolocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeolocResponse.ProtoReflect.Descriptor instead.
func (*UpdateGeolocResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateGeolocResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGeolocResponse) GetData() *GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateGeolocs
type UpdateGeolocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*UpdateGeolocInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateGeolocsRequest) Reset() {
	*x = UpdateGeolocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeolocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeolocsRequest) ProtoMessage() {}

func (x *UpdateGeolocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeolocsRequest.ProtoReflect.Descriptor instead.
func (*UpdateGeolocsRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateGeolocsRequest) GetRequest() []*UpdateGeolocInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateGeolocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*GeolocData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateGeolocsResponse) Reset() {
	*x = UpdateGeolocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGeolocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGeolocsResponse) ProtoMessage() {}

func (x *UpdateGeolocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGeolocsResponse.ProtoReflect.Descriptor instead.
func (*UpdateGeolocsResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateGeolocsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGeolocsResponse) GetData() []*GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteGeoloc
type DeleteGeolocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteGeolocInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteGeolocRequest) Reset() {
	*x = DeleteGeolocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocRequest) ProtoMessage() {}

func (x *DeleteGeolocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocRequest.ProtoReflect.Descriptor instead.
func (*DeleteGeolocRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteGeolocRequest) GetRequest() *DeleteGeolocInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteGeolocInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGeolocInput) Reset() {
	*x = DeleteGeolocInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocInput) ProtoMessage() {}

func (x *DeleteGeolocInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocInput.ProtoReflect.Descriptor instead.
func (*DeleteGeolocInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteGeolocInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteGeolocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *GeolocData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteGeolocResponse) Reset() {
	*x = DeleteGeolocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocResponse) ProtoMessage() {}

func (x *DeleteGeolocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocResponse.ProtoReflect.Descriptor instead.
func (*DeleteGeolocResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteGeolocResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteGeolocResponse) GetData() *GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteGeolocs
type DeleteGeolocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteGeolocsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteGeolocsRequest) Reset() {
	*x = DeleteGeolocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocsRequest) ProtoMessage() {}

func (x *DeleteGeolocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocsRequest.ProtoReflect.Descriptor instead.
func (*DeleteGeolocsRequest) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteGeolocsRequest) GetRequest() *DeleteGeolocsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteGeolocsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGeolocsInput) Reset() {
	*x = DeleteGeolocsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocsInput) ProtoMessage() {}

func (x *DeleteGeolocsInput) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocsInput.ProtoReflect.Descriptor instead.
func (*DeleteGeolocsInput) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteGeolocsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteGeolocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*GeolocData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteGeolocsResponse) Reset() {
	*x = DeleteGeolocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGeolocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGeolocsResponse) ProtoMessage() {}

func (x *DeleteGeolocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGeolocsResponse.ProtoReflect.Descriptor instead.
func (*DeleteGeolocsResponse) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteGeolocsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteGeolocsResponse) GetData() []*GeolocData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Base Data
type GeolocData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeolocID    string `protobuf:"bytes,1,opt,name=geolocID,proto3" json:"geolocID,omitempty"`
	Latitude    string `protobuf:"bytes,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   string `protobuf:"bytes,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Coordinates string `protobuf:"bytes,4,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *GeolocData) Reset() {
	*x = GeolocData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeolocData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeolocData) ProtoMessage() {}

func (x *GeolocData) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeolocData.ProtoReflect.Descriptor instead.
func (*GeolocData) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{23}
}

func (x *GeolocData) GetGeolocID() string {
	if x != nil {
		return x.GeolocID
	}
	return ""
}

func (x *GeolocData) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *GeolocData) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *GeolocData) GetCoordinates() string {
	if x != nil {
		return x.Coordinates
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{24}
}

func (x *Header) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Header) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

type OptionalString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	HasSet bool   `protobuf:"varint,2,opt,name=hasSet,proto3" json:"hasSet,omitempty"`
}

func (x *OptionalString) Reset() {
	*x = OptionalString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geoloc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalString) ProtoMessage() {}

func (x *OptionalString) ProtoReflect() protoreflect.Message {
	mi := &file_geoloc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalString.ProtoReflect.Descriptor instead.
func (*OptionalString) Descriptor() ([]byte, []int) {
	return file_geoloc_proto_rawDescGZIP(), []int{25}
}

func (x *OptionalString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionalString) GetHasSet() bool {
	if x != nil {
		return x.HasSet
	}
	return false
}

var File_geoloc_proto protoreflect.FileDescriptor

var file_geoloc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4b, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a,
	0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x4c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3e, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x32,
	0xd6, 0x05, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1e,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x12,
	0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x12, 0x1b,
	0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f,
	0x6c, 0x6f, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x12, 0x1b, 0x2e, 0x67, 0x65,
	0x6f, 0x6c, 0x6f, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_geoloc_proto_rawDescOnce sync.Once
	file_geoloc_proto_rawDescData = file_geoloc_proto_rawDesc
)

func file_geoloc_proto_rawDescGZIP() []byte {
	file_geoloc_proto_rawDescOnce.Do(func() {
		file_geoloc_proto_rawDescData = protoimpl.X.CompressGZIP(file_geoloc_proto_rawDescData)
	})
	return file_geoloc_proto_rawDescData
}

var file_geoloc_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_geoloc_proto_goTypes = []interface{}{
	(*GetAllGeolocsResponse)(nil),   // 0: geoloc.GetAllGeolocsResponse
	(*GetGeolocByIDRequest)(nil),    // 1: geoloc.GetGeolocByIDRequest
	(*GetGeolocByIDInput)(nil),      // 2: geoloc.GetGeolocByIDInput
	(*GetGeolocByIDResponse)(nil),   // 3: geoloc.GetGeolocByIDResponse
	(*GetGeolocsByIDsRequest)(nil),  // 4: geoloc.GetGeolocsByIDsRequest
	(*GetGeolocsByIDsInput)(nil),    // 5: geoloc.GetGeolocsByIDsInput
	(*GetGeolocsByIDsResponse)(nil), // 6: geoloc.GetGeolocsByIDsResponse
	(*InsertGeolocRequest)(nil),     // 7: geoloc.InsertGeolocRequest
	(*InsertGeolocInput)(nil),       // 8: geoloc.InsertGeolocInput
	(*InsertGeolocResponse)(nil),    // 9: geoloc.InsertGeolocResponse
	(*InsertGeolocsRequest)(nil),    // 10: geoloc.InsertGeolocsRequest
	(*InsertGeolocsResponse)(nil),   // 11: geoloc.InsertGeolocsResponse
	(*UpdateGeolocRequest)(nil),     // 12: geoloc.UpdateGeolocRequest
	(*UpdateGeolocInput)(nil),       // 13: geoloc.UpdateGeolocInput
	(*UpdateGeolocResponse)(nil),    // 14: geoloc.UpdateGeolocResponse
	(*UpdateGeolocsRequest)(nil),    // 15: geoloc.UpdateGeolocsRequest
	(*UpdateGeolocsResponse)(nil),   // 16: geoloc.UpdateGeolocsResponse
	(*DeleteGeolocRequest)(nil),     // 17: geoloc.DeleteGeolocRequest
	(*DeleteGeolocInput)(nil),       // 18: geoloc.DeleteGeolocInput
	(*DeleteGeolocResponse)(nil),    // 19: geoloc.DeleteGeolocResponse
	(*DeleteGeolocsRequest)(nil),    // 20: geoloc.DeleteGeolocsRequest
	(*DeleteGeolocsInput)(nil),      // 21: geoloc.DeleteGeolocsInput
	(*DeleteGeolocsResponse)(nil),   // 22: geoloc.DeleteGeolocsResponse
	(*GeolocData)(nil),              // 23: geoloc.GeolocData
	(*Header)(nil),                  // 24: geoloc.Header
	(*OptionalString)(nil),          // 25: geoloc.OptionalString
	(*emptypb.Empty)(nil),           // 26: google.protobuf.Empty
}
var file_geoloc_proto_depIdxs = []int32{
	24, // 0: geoloc.GetAllGeolocsResponse.header:type_name -> geoloc.Header
	23, // 1: geoloc.GetAllGeolocsResponse.data:type_name -> geoloc.GeolocData
	2,  // 2: geoloc.GetGeolocByIDRequest.request:type_name -> geoloc.GetGeolocByIDInput
	24, // 3: geoloc.GetGeolocByIDResponse.header:type_name -> geoloc.Header
	23, // 4: geoloc.GetGeolocByIDResponse.data:type_name -> geoloc.GeolocData
	5,  // 5: geoloc.GetGeolocsByIDsRequest.request:type_name -> geoloc.GetGeolocsByIDsInput
	24, // 6: geoloc.GetGeolocsByIDsResponse.header:type_name -> geoloc.Header
	23, // 7: geoloc.GetGeolocsByIDsResponse.data:type_name -> geoloc.GeolocData
	8,  // 8: geoloc.InsertGeolocRequest.request:type_name -> geoloc.InsertGeolocInput
	24, // 9: geoloc.InsertGeolocResponse.header:type_name -> geoloc.Header
	23, // 10: geoloc.InsertGeolocResponse.data:type_name -> geoloc.GeolocData
	8,  // 11: geoloc.InsertGeolocsRequest.request:type_name -> geoloc.InsertGeolocInput
	24, // 12: geoloc.InsertGeolocsResponse.header:type_name -> geoloc.Header
	23, // 13: geoloc.InsertGeolocsResponse.data:type_name -> geoloc.GeolocData
	13, // 14: geoloc.UpdateGeolocRequest.request:type_name -> geoloc.UpdateGeolocInput
	25, // 15: geoloc.UpdateGeolocInput.latitude:type_name -> geoloc.OptionalString
	25, // 16: geoloc.UpdateGeolocInput.longitude:type_name -> geoloc.OptionalString
	25, // 17: geoloc.UpdateGeolocInput.coordinates:type_name -> geoloc.OptionalString
	24, // 18: geoloc.UpdateGeolocResponse.header:type_name -> geoloc.Header
	23, // 19: geoloc.UpdateGeolocResponse.data:type_name -> geoloc.GeolocData
	13, // 20: geoloc.UpdateGeolocsRequest.request:type_name -> geoloc.UpdateGeolocInput
	24, // 21: geoloc.UpdateGeolocsResponse.header:type_name -> geoloc.Header
	23, // 22: geoloc.UpdateGeolocsResponse.data:type_name -> geoloc.GeolocData
	18, // 23: geoloc.DeleteGeolocRequest.request:type_name -> geoloc.DeleteGeolocInput
	24, // 24: geoloc.DeleteGeolocResponse.header:type_name -> geoloc.Header
	23, // 25: geoloc.DeleteGeolocResponse.data:type_name -> geoloc.GeolocData
	21, // 26: geoloc.DeleteGeolocsRequest.request:type_name -> geoloc.DeleteGeolocsInput
	24, // 27: geoloc.DeleteGeolocsResponse.header:type_name -> geoloc.Header
	23, // 28: geoloc.DeleteGeolocsResponse.data:type_name -> geoloc.GeolocData
	26, // 29: geoloc.GeolocService.GetAllGeolocs:input_type -> google.protobuf.Empty
	1,  // 30: geoloc.GeolocService.GetGeolocByID:input_type -> geoloc.GetGeolocByIDRequest
	4,  // 31: geoloc.GeolocService.GetGeolocsByIDs:input_type -> geoloc.GetGeolocsByIDsRequest
	7,  // 32: geoloc.GeolocService.InsertGeoloc:input_type -> geoloc.InsertGeolocRequest
	10, // 33: geoloc.GeolocService.InsertGeolocs:input_type -> geoloc.InsertGeolocsRequest
	12, // 34: geoloc.GeolocService.UpdateGeoloc:input_type -> geoloc.UpdateGeolocRequest
	15, // 35: geoloc.GeolocService.UpdateGeolocs:input_type -> geoloc.UpdateGeolocsRequest
	17, // 36: geoloc.GeolocService.DeleteGeoloc:input_type -> geoloc.DeleteGeolocRequest
	20, // 37: geoloc.GeolocService.DeleteGeolocs:input_type -> geoloc.DeleteGeolocsRequest
	0,  // 38: geoloc.GeolocService.GetAllGeolocs:output_type -> geoloc.GetAllGeolocsResponse
	3,  // 39: geoloc.GeolocService.GetGeolocByID:output_type -> geoloc.GetGeolocByIDResponse
	6,  // 40: geoloc.GeolocService.GetGeolocsByIDs:output_type -> geoloc.GetGeolocsByIDsResponse
	9,  // 41: geoloc.GeolocService.InsertGeoloc:output_type -> geoloc.InsertGeolocResponse
	11, // 42: geoloc.GeolocService.InsertGeolocs:output_type -> geoloc.InsertGeolocsResponse
	14, // 43: geoloc.GeolocService.UpdateGeoloc:output_type -> geoloc.UpdateGeolocResponse
	16, // 44: geoloc.GeolocService.UpdateGeolocs:output_type -> geoloc.UpdateGeolocsResponse
	19, // 45: geoloc.GeolocService.DeleteGeoloc:output_type -> geoloc.DeleteGeolocResponse
	22, // 46: geoloc.GeolocService.DeleteGeolocs:output_type -> geoloc.DeleteGeolocsResponse
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_geoloc_proto_init() }
func file_geoloc_proto_init() {
	if File_geoloc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_geoloc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGeolocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocByIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocsByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocsByIDsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeolocsByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGeolocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGeolocInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGeolocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGeolocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertGeolocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeolocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeolocInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeolocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeolocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGeolocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGeolocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeolocData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geoloc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_geoloc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_geoloc_proto_goTypes,
		DependencyIndexes: file_geoloc_proto_depIdxs,
		MessageInfos:      file_geoloc_proto_msgTypes,
	}.Build()
	File_geoloc_proto = out.File
	file_geoloc_proto_rawDesc = nil
	file_geoloc_proto_goTypes = nil
	file_geoloc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GeolocServiceClient is the client API for GeolocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeolocServiceClient interface {
	GetAllGeolocs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGeolocsResponse, error)
	GetGeolocByID(ctx context.Context, in *GetGeolocByIDRequest, opts ...grpc.CallOption) (*GetGeolocByIDResponse, error)
	GetGeolocsByIDs(ctx context.Context, in *GetGeolocsByIDsRequest, opts ...grpc.CallOption) (*GetGeolocsByIDsResponse, error)
	InsertGeoloc(ctx context.Context, in *InsertGeolocRequest, opts ...grpc.CallOption) (*InsertGeolocResponse, error)
	InsertGeolocs(ctx context.Context, in *InsertGeolocsRequest, opts ...grpc.CallOption) (*InsertGeolocsResponse, error)
	UpdateGeoloc(ctx context.Context, in *UpdateGeolocRequest, opts ...grpc.CallOption) (*UpdateGeolocResponse, error)
	UpdateGeolocs(ctx context.Context, in *UpdateGeolocsRequest, opts ...grpc.CallOption) (*UpdateGeolocsResponse, error)
	DeleteGeoloc(ctx context.Context, in *DeleteGeolocRequest, opts ...grpc.CallOption) (*DeleteGeolocResponse, error)
	DeleteGeolocs(ctx context.Context, in *DeleteGeolocsRequest, opts ...grpc.CallOption) (*DeleteGeolocsResponse, error)
}

type geolocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolocServiceClient(cc grpc.ClientConnInterface) GeolocServiceClient {
	return &geolocServiceClient{cc}
}

func (c *geolocServiceClient) GetAllGeolocs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGeolocsResponse, error) {
	out := new(GetAllGeolocsResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/GetAllGeolocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) GetGeolocByID(ctx context.Context, in *GetGeolocByIDRequest, opts ...grpc.CallOption) (*GetGeolocByIDResponse, error) {
	out := new(GetGeolocByIDResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/GetGeolocByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) GetGeolocsByIDs(ctx context.Context, in *GetGeolocsByIDsRequest, opts ...grpc.CallOption) (*GetGeolocsByIDsResponse, error) {
	out := new(GetGeolocsByIDsResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/GetGeolocsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) InsertGeoloc(ctx context.Context, in *InsertGeolocRequest, opts ...grpc.CallOption) (*InsertGeolocResponse, error) {
	out := new(InsertGeolocResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/InsertGeoloc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) InsertGeolocs(ctx context.Context, in *InsertGeolocsRequest, opts ...grpc.CallOption) (*InsertGeolocsResponse, error) {
	out := new(InsertGeolocsResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/InsertGeolocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) UpdateGeoloc(ctx context.Context, in *UpdateGeolocRequest, opts ...grpc.CallOption) (*UpdateGeolocResponse, error) {
	out := new(UpdateGeolocResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/UpdateGeoloc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) UpdateGeolocs(ctx context.Context, in *UpdateGeolocsRequest, opts ...grpc.CallOption) (*UpdateGeolocsResponse, error) {
	out := new(UpdateGeolocsResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/UpdateGeolocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) DeleteGeoloc(ctx context.Context, in *DeleteGeolocRequest, opts ...grpc.CallOption) (*DeleteGeolocResponse, error) {
	out := new(DeleteGeolocResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/DeleteGeoloc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocServiceClient) DeleteGeolocs(ctx context.Context, in *DeleteGeolocsRequest, opts ...grpc.CallOption) (*DeleteGeolocsResponse, error) {
	out := new(DeleteGeolocsResponse)
	err := c.cc.Invoke(ctx, "/geoloc.GeolocService/DeleteGeolocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolocServiceServer is the server API for GeolocService service.
type GeolocServiceServer interface {
	GetAllGeolocs(context.Context, *emptypb.Empty) (*GetAllGeolocsResponse, error)
	GetGeolocByID(context.Context, *GetGeolocByIDRequest) (*GetGeolocByIDResponse, error)
	GetGeolocsByIDs(context.Context, *GetGeolocsByIDsRequest) (*GetGeolocsByIDsResponse, error)
	InsertGeoloc(context.Context, *InsertGeolocRequest) (*InsertGeolocResponse, error)
	InsertGeolocs(context.Context, *InsertGeolocsRequest) (*InsertGeolocsResponse, error)
	UpdateGeoloc(context.Context, *UpdateGeolocRequest) (*UpdateGeolocResponse, error)
	UpdateGeolocs(context.Context, *UpdateGeolocsRequest) (*UpdateGeolocsResponse, error)
	DeleteGeoloc(context.Context, *DeleteGeolocRequest) (*DeleteGeolocResponse, error)
	DeleteGeolocs(context.Context, *DeleteGeolocsRequest) (*DeleteGeolocsResponse, error)
}

// UnimplementedGeolocServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeolocServiceServer struct {
}

func (*UnimplementedGeolocServiceServer) GetAllGeolocs(context.Context, *emptypb.Empty) (*GetAllGeolocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGeolocs not implemented")
}
func (*UnimplementedGeolocServiceServer) GetGeolocByID(context.Context, *GetGeolocByIDRequest) (*GetGeolocByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeolocByID not implemented")
}
func (*UnimplementedGeolocServiceServer) GetGeolocsByIDs(context.Context, *GetGeolocsByIDsRequest) (*GetGeolocsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeolocsByIDs not implemented")
}
func (*UnimplementedGeolocServiceServer) InsertGeoloc(context.Context, *InsertGeolocRequest) (*InsertGeolocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertGeoloc not implemented")
}
func (*UnimplementedGeolocServiceServer) InsertGeolocs(context.Context, *InsertGeolocsRequest) (*InsertGeolocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertGeolocs not implemented")
}
func (*UnimplementedGeolocServiceServer) UpdateGeoloc(context.Context, *UpdateGeolocRequest) (*UpdateGeolocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeoloc not implemented")
}
func (*UnimplementedGeolocServiceServer) UpdateGeolocs(context.Context, *UpdateGeolocsRequest) (*UpdateGeolocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeolocs not implemented")
}
func (*UnimplementedGeolocServiceServer) DeleteGeoloc(context.Context, *DeleteGeolocRequest) (*DeleteGeolocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeoloc not implemented")
}
func (*UnimplementedGeolocServiceServer) DeleteGeolocs(context.Context, *DeleteGeolocsRequest) (*DeleteGeolocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeolocs not implemented")
}

func RegisterGeolocServiceServer(s *grpc.Server, srv GeolocServiceServer) {
	s.RegisterService(&_GeolocService_serviceDesc, srv)
}

func _GeolocService_GetAllGeolocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).GetAllGeolocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/GetAllGeolocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).GetAllGeolocs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_GetGeolocByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeolocByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).GetGeolocByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/GetGeolocByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).GetGeolocByID(ctx, req.(*GetGeolocByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_GetGeolocsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeolocsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).GetGeolocsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/GetGeolocsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).GetGeolocsByIDs(ctx, req.(*GetGeolocsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_InsertGeoloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertGeolocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).InsertGeoloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/InsertGeoloc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).InsertGeoloc(ctx, req.(*InsertGeolocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_InsertGeolocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertGeolocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).InsertGeolocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/InsertGeolocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).InsertGeolocs(ctx, req.(*InsertGeolocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_UpdateGeoloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeolocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).UpdateGeoloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/UpdateGeoloc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).UpdateGeoloc(ctx, req.(*UpdateGeolocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_UpdateGeolocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeolocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).UpdateGeolocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/UpdateGeolocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).UpdateGeolocs(ctx, req.(*UpdateGeolocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_DeleteGeoloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeolocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).DeleteGeoloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/DeleteGeoloc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).DeleteGeoloc(ctx, req.(*DeleteGeolocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeolocService_DeleteGeolocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeolocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocServiceServer).DeleteGeolocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoloc.GeolocService/DeleteGeolocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocServiceServer).DeleteGeolocs(ctx, req.(*DeleteGeolocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeolocService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geoloc.GeolocService",
	HandlerType: (*GeolocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllGeolocs",
			Handler:    _GeolocService_GetAllGeolocs_Handler,
		},
		{
			MethodName: "GetGeolocByID",
			Handler:    _GeolocService_GetGeolocByID_Handler,
		},
		{
			MethodName: "GetGeolocsByIDs",
			Handler:    _GeolocService_GetGeolocsByIDs_Handler,
		},
		{
			MethodName: "InsertGeoloc",
			Handler:    _GeolocService_InsertGeoloc_Handler,
		},
		{
			MethodName: "InsertGeolocs",
			Handler:    _GeolocService_InsertGeolocs_Handler,
		},
		{
			MethodName: "UpdateGeoloc",
			Handler:    _GeolocService_UpdateGeoloc_Handler,
		},
		{
			MethodName: "UpdateGeolocs",
			Handler:    _GeolocService_UpdateGeolocs_Handler,
		},
		{
			MethodName: "DeleteGeoloc",
			Handler:    _GeolocService_DeleteGeoloc_Handler,
		},
		{
			MethodName: "DeleteGeolocs",
			Handler:    _GeolocService_DeleteGeolocs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geoloc.proto",
}
