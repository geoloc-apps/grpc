// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: island.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetAllIslands
type GetAllIslandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*IslandData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllIslandsResponse) Reset() {
	*x = GetAllIslandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllIslandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllIslandsResponse) ProtoMessage() {}

func (x *GetAllIslandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllIslandsResponse.ProtoReflect.Descriptor instead.
func (*GetAllIslandsResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllIslandsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAllIslandsResponse) GetData() []*IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetIslandByID
type GetIslandByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetIslandByIDInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetIslandByIDRequest) Reset() {
	*x = GetIslandByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandByIDRequest) ProtoMessage() {}

func (x *GetIslandByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandByIDRequest.ProtoReflect.Descriptor instead.
func (*GetIslandByIDRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{1}
}

func (x *GetIslandByIDRequest) GetRequest() *GetIslandByIDInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetIslandByIDInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIslandByIDInput) Reset() {
	*x = GetIslandByIDInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandByIDInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandByIDInput) ProtoMessage() {}

func (x *GetIslandByIDInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandByIDInput.ProtoReflect.Descriptor instead.
func (*GetIslandByIDInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{2}
}

func (x *GetIslandByIDInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetIslandByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *IslandData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIslandByIDResponse) Reset() {
	*x = GetIslandByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandByIDResponse) ProtoMessage() {}

func (x *GetIslandByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandByIDResponse.ProtoReflect.Descriptor instead.
func (*GetIslandByIDResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{3}
}

func (x *GetIslandByIDResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetIslandByIDResponse) GetData() *IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetIslandsByIDs
type GetIslandsByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *GetIslandsByIDsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetIslandsByIDsRequest) Reset() {
	*x = GetIslandsByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandsByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandsByIDsRequest) ProtoMessage() {}

func (x *GetIslandsByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandsByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetIslandsByIDsRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{4}
}

func (x *GetIslandsByIDsRequest) GetRequest() *GetIslandsByIDsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetIslandsByIDsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIslandsByIDsInput) Reset() {
	*x = GetIslandsByIDsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandsByIDsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandsByIDsInput) ProtoMessage() {}

func (x *GetIslandsByIDsInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandsByIDsInput.ProtoReflect.Descriptor instead.
func (*GetIslandsByIDsInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{5}
}

func (x *GetIslandsByIDsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetIslandsByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*IslandData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIslandsByIDsResponse) Reset() {
	*x = GetIslandsByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIslandsByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIslandsByIDsResponse) ProtoMessage() {}

func (x *GetIslandsByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIslandsByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetIslandsByIDsResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{6}
}

func (x *GetIslandsByIDsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetIslandsByIDsResponse) GetData() []*IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertIsland
type InsertIslandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *InsertIslandInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertIslandRequest) Reset() {
	*x = InsertIslandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIslandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIslandRequest) ProtoMessage() {}

func (x *InsertIslandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIslandRequest.ProtoReflect.Descriptor instead.
func (*InsertIslandRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{7}
}

func (x *InsertIslandRequest) GetRequest() *InsertIslandInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertIslandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IslandID   string `protobuf:"bytes,1,opt,name=islandID,proto3" json:"islandID,omitempty"`
	IslandName string `protobuf:"bytes,2,opt,name=islandName,proto3" json:"islandName,omitempty"`
}

func (x *InsertIslandInput) Reset() {
	*x = InsertIslandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIslandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIslandInput) ProtoMessage() {}

func (x *InsertIslandInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIslandInput.ProtoReflect.Descriptor instead.
func (*InsertIslandInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{8}
}

func (x *InsertIslandInput) GetIslandID() string {
	if x != nil {
		return x.IslandID
	}
	return ""
}

func (x *InsertIslandInput) GetIslandName() string {
	if x != nil {
		return x.IslandName
	}
	return ""
}

type InsertIslandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *IslandData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertIslandResponse) Reset() {
	*x = InsertIslandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIslandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIslandResponse) ProtoMessage() {}

func (x *InsertIslandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIslandResponse.ProtoReflect.Descriptor instead.
func (*InsertIslandResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{9}
}

func (x *InsertIslandResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertIslandResponse) GetData() *IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InsertIslands
type InsertIslandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*InsertIslandInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *InsertIslandsRequest) Reset() {
	*x = InsertIslandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIslandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIslandsRequest) ProtoMessage() {}

func (x *InsertIslandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIslandsRequest.ProtoReflect.Descriptor instead.
func (*InsertIslandsRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{10}
}

func (x *InsertIslandsRequest) GetRequest() []*InsertIslandInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type InsertIslandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*IslandData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *InsertIslandsResponse) Reset() {
	*x = InsertIslandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertIslandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertIslandsResponse) ProtoMessage() {}

func (x *InsertIslandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertIslandsResponse.ProtoReflect.Descriptor instead.
func (*InsertIslandsResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{11}
}

func (x *InsertIslandsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InsertIslandsResponse) GetData() []*IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateIsland
type UpdateIslandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *UpdateIslandInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateIslandRequest) Reset() {
	*x = UpdateIslandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIslandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIslandRequest) ProtoMessage() {}

func (x *UpdateIslandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIslandRequest.ProtoReflect.Descriptor instead.
func (*UpdateIslandRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateIslandRequest) GetRequest() *UpdateIslandInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateIslandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IslandID   string          `protobuf:"bytes,1,opt,name=islandID,proto3" json:"islandID,omitempty"`
	IslandName *OptionalString `protobuf:"bytes,2,opt,name=islandName,proto3" json:"islandName,omitempty"`
}

func (x *UpdateIslandInput) Reset() {
	*x = UpdateIslandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIslandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIslandInput) ProtoMessage() {}

func (x *UpdateIslandInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIslandInput.ProtoReflect.Descriptor instead.
func (*UpdateIslandInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateIslandInput) GetIslandID() string {
	if x != nil {
		return x.IslandID
	}
	return ""
}

func (x *UpdateIslandInput) GetIslandName() *OptionalString {
	if x != nil {
		return x.IslandName
	}
	return nil
}

type UpdateIslandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *IslandData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIslandResponse) Reset() {
	*x = UpdateIslandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIslandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIslandResponse) ProtoMessage() {}

func (x *UpdateIslandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIslandResponse.ProtoReflect.Descriptor instead.
func (*UpdateIslandResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateIslandResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateIslandResponse) GetData() *IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateIslands
type UpdateIslandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*UpdateIslandInput `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *UpdateIslandsRequest) Reset() {
	*x = UpdateIslandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIslandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIslandsRequest) ProtoMessage() {}

func (x *UpdateIslandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIslandsRequest.ProtoReflect.Descriptor instead.
func (*UpdateIslandsRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateIslandsRequest) GetRequest() []*UpdateIslandInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type UpdateIslandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*IslandData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateIslandsResponse) Reset() {
	*x = UpdateIslandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIslandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIslandsResponse) ProtoMessage() {}

func (x *UpdateIslandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIslandsResponse.ProtoReflect.Descriptor instead.
func (*UpdateIslandsResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateIslandsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateIslandsResponse) GetData() []*IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteIsland
type DeleteIslandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteIslandInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteIslandRequest) Reset() {
	*x = DeleteIslandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandRequest) ProtoMessage() {}

func (x *DeleteIslandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandRequest.ProtoReflect.Descriptor instead.
func (*DeleteIslandRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteIslandRequest) GetRequest() *DeleteIslandInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteIslandInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteIslandInput) Reset() {
	*x = DeleteIslandInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandInput) ProtoMessage() {}

func (x *DeleteIslandInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandInput.ProtoReflect.Descriptor instead.
func (*DeleteIslandInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteIslandInput) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteIslandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *IslandData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteIslandResponse) Reset() {
	*x = DeleteIslandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandResponse) ProtoMessage() {}

func (x *DeleteIslandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandResponse.ProtoReflect.Descriptor instead.
func (*DeleteIslandResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteIslandResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteIslandResponse) GetData() *IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteIslands
type DeleteIslandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DeleteIslandsInput `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *DeleteIslandsRequest) Reset() {
	*x = DeleteIslandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandsRequest) ProtoMessage() {}

func (x *DeleteIslandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandsRequest.ProtoReflect.Descriptor instead.
func (*DeleteIslandsRequest) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteIslandsRequest) GetRequest() *DeleteIslandsInput {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteIslandsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteIslandsInput) Reset() {
	*x = DeleteIslandsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandsInput) ProtoMessage() {}

func (x *DeleteIslandsInput) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandsInput.ProtoReflect.Descriptor instead.
func (*DeleteIslandsInput) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteIslandsInput) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteIslandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*IslandData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteIslandsResponse) Reset() {
	*x = DeleteIslandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIslandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIslandsResponse) ProtoMessage() {}

func (x *DeleteIslandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIslandsResponse.ProtoReflect.Descriptor instead.
func (*DeleteIslandsResponse) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteIslandsResponse) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteIslandsResponse) GetData() []*IslandData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Base Data
type IslandData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IslandID   string `protobuf:"bytes,1,opt,name=islandID,proto3" json:"islandID,omitempty"`
	IslandName string `protobuf:"bytes,2,opt,name=islandName,proto3" json:"islandName,omitempty"`
}

func (x *IslandData) Reset() {
	*x = IslandData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandData) ProtoMessage() {}

func (x *IslandData) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandData.ProtoReflect.Descriptor instead.
func (*IslandData) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{23}
}

func (x *IslandData) GetIslandID() string {
	if x != nil {
		return x.IslandID
	}
	return ""
}

func (x *IslandData) GetIslandName() string {
	if x != nil {
		return x.IslandName
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{24}
}

func (x *Header) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Header) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

type OptionalString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	HasSet bool   `protobuf:"varint,2,opt,name=hasSet,proto3" json:"hasSet,omitempty"`
}

func (x *OptionalString) Reset() {
	*x = OptionalString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_island_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalString) ProtoMessage() {}

func (x *OptionalString) ProtoReflect() protoreflect.Message {
	mi := &file_island_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalString.ProtoReflect.Descriptor instead.
func (*OptionalString) Descriptor() ([]byte, []int) {
	return file_island_proto_rawDescGZIP(), []int{25}
}

func (x *OptionalString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionalString) GetHasSet() bool {
	if x != nil {
		return x.HasSet
	}
	return false
}

var File_island_proto protoreflect.FileDescriptor

var file_island_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x67, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x14, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x67, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x48, 0x0a, 0x0a, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x53, 0x65, 0x74, 0x32, 0xd6, 0x05, 0x0a, 0x0d, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_island_proto_rawDescOnce sync.Once
	file_island_proto_rawDescData = file_island_proto_rawDesc
)

func file_island_proto_rawDescGZIP() []byte {
	file_island_proto_rawDescOnce.Do(func() {
		file_island_proto_rawDescData = protoimpl.X.CompressGZIP(file_island_proto_rawDescData)
	})
	return file_island_proto_rawDescData
}

var file_island_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_island_proto_goTypes = []interface{}{
	(*GetAllIslandsResponse)(nil),   // 0: island.GetAllIslandsResponse
	(*GetIslandByIDRequest)(nil),    // 1: island.GetIslandByIDRequest
	(*GetIslandByIDInput)(nil),      // 2: island.GetIslandByIDInput
	(*GetIslandByIDResponse)(nil),   // 3: island.GetIslandByIDResponse
	(*GetIslandsByIDsRequest)(nil),  // 4: island.GetIslandsByIDsRequest
	(*GetIslandsByIDsInput)(nil),    // 5: island.GetIslandsByIDsInput
	(*GetIslandsByIDsResponse)(nil), // 6: island.GetIslandsByIDsResponse
	(*InsertIslandRequest)(nil),     // 7: island.InsertIslandRequest
	(*InsertIslandInput)(nil),       // 8: island.InsertIslandInput
	(*InsertIslandResponse)(nil),    // 9: island.InsertIslandResponse
	(*InsertIslandsRequest)(nil),    // 10: island.InsertIslandsRequest
	(*InsertIslandsResponse)(nil),   // 11: island.InsertIslandsResponse
	(*UpdateIslandRequest)(nil),     // 12: island.UpdateIslandRequest
	(*UpdateIslandInput)(nil),       // 13: island.UpdateIslandInput
	(*UpdateIslandResponse)(nil),    // 14: island.UpdateIslandResponse
	(*UpdateIslandsRequest)(nil),    // 15: island.UpdateIslandsRequest
	(*UpdateIslandsResponse)(nil),   // 16: island.UpdateIslandsResponse
	(*DeleteIslandRequest)(nil),     // 17: island.DeleteIslandRequest
	(*DeleteIslandInput)(nil),       // 18: island.DeleteIslandInput
	(*DeleteIslandResponse)(nil),    // 19: island.DeleteIslandResponse
	(*DeleteIslandsRequest)(nil),    // 20: island.DeleteIslandsRequest
	(*DeleteIslandsInput)(nil),      // 21: island.DeleteIslandsInput
	(*DeleteIslandsResponse)(nil),   // 22: island.DeleteIslandsResponse
	(*IslandData)(nil),              // 23: island.IslandData
	(*Header)(nil),                  // 24: island.Header
	(*OptionalString)(nil),          // 25: island.OptionalString
	(*emptypb.Empty)(nil),           // 26: google.protobuf.Empty
}
var file_island_proto_depIdxs = []int32{
	24, // 0: island.GetAllIslandsResponse.header:type_name -> island.Header
	23, // 1: island.GetAllIslandsResponse.data:type_name -> island.IslandData
	2,  // 2: island.GetIslandByIDRequest.request:type_name -> island.GetIslandByIDInput
	24, // 3: island.GetIslandByIDResponse.header:type_name -> island.Header
	23, // 4: island.GetIslandByIDResponse.data:type_name -> island.IslandData
	5,  // 5: island.GetIslandsByIDsRequest.request:type_name -> island.GetIslandsByIDsInput
	24, // 6: island.GetIslandsByIDsResponse.header:type_name -> island.Header
	23, // 7: island.GetIslandsByIDsResponse.data:type_name -> island.IslandData
	8,  // 8: island.InsertIslandRequest.request:type_name -> island.InsertIslandInput
	24, // 9: island.InsertIslandResponse.header:type_name -> island.Header
	23, // 10: island.InsertIslandResponse.data:type_name -> island.IslandData
	8,  // 11: island.InsertIslandsRequest.request:type_name -> island.InsertIslandInput
	24, // 12: island.InsertIslandsResponse.header:type_name -> island.Header
	23, // 13: island.InsertIslandsResponse.data:type_name -> island.IslandData
	13, // 14: island.UpdateIslandRequest.request:type_name -> island.UpdateIslandInput
	25, // 15: island.UpdateIslandInput.islandName:type_name -> island.OptionalString
	24, // 16: island.UpdateIslandResponse.header:type_name -> island.Header
	23, // 17: island.UpdateIslandResponse.data:type_name -> island.IslandData
	13, // 18: island.UpdateIslandsRequest.request:type_name -> island.UpdateIslandInput
	24, // 19: island.UpdateIslandsResponse.header:type_name -> island.Header
	23, // 20: island.UpdateIslandsResponse.data:type_name -> island.IslandData
	18, // 21: island.DeleteIslandRequest.request:type_name -> island.DeleteIslandInput
	24, // 22: island.DeleteIslandResponse.header:type_name -> island.Header
	23, // 23: island.DeleteIslandResponse.data:type_name -> island.IslandData
	21, // 24: island.DeleteIslandsRequest.request:type_name -> island.DeleteIslandsInput
	24, // 25: island.DeleteIslandsResponse.header:type_name -> island.Header
	23, // 26: island.DeleteIslandsResponse.data:type_name -> island.IslandData
	26, // 27: island.IslandService.GetAllIslands:input_type -> google.protobuf.Empty
	1,  // 28: island.IslandService.GetIslandByID:input_type -> island.GetIslandByIDRequest
	4,  // 29: island.IslandService.GetIslandsByIDs:input_type -> island.GetIslandsByIDsRequest
	7,  // 30: island.IslandService.InsertIsland:input_type -> island.InsertIslandRequest
	10, // 31: island.IslandService.InsertIslands:input_type -> island.InsertIslandsRequest
	12, // 32: island.IslandService.UpdateIsland:input_type -> island.UpdateIslandRequest
	15, // 33: island.IslandService.UpdateIslands:input_type -> island.UpdateIslandsRequest
	17, // 34: island.IslandService.DeleteIsland:input_type -> island.DeleteIslandRequest
	20, // 35: island.IslandService.DeleteIslands:input_type -> island.DeleteIslandsRequest
	0,  // 36: island.IslandService.GetAllIslands:output_type -> island.GetAllIslandsResponse
	3,  // 37: island.IslandService.GetIslandByID:output_type -> island.GetIslandByIDResponse
	6,  // 38: island.IslandService.GetIslandsByIDs:output_type -> island.GetIslandsByIDsResponse
	9,  // 39: island.IslandService.InsertIsland:output_type -> island.InsertIslandResponse
	11, // 40: island.IslandService.InsertIslands:output_type -> island.InsertIslandsResponse
	14, // 41: island.IslandService.UpdateIsland:output_type -> island.UpdateIslandResponse
	16, // 42: island.IslandService.UpdateIslands:output_type -> island.UpdateIslandsResponse
	19, // 43: island.IslandService.DeleteIsland:output_type -> island.DeleteIslandResponse
	22, // 44: island.IslandService.DeleteIslands:output_type -> island.DeleteIslandsResponse
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_island_proto_init() }
func file_island_proto_init() {
	if File_island_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_island_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllIslandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandByIDInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandsByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandsByIDsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIslandsByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIslandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIslandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIslandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIslandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertIslandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIslandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIslandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIslandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIslandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIslandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIslandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_island_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_island_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_island_proto_goTypes,
		DependencyIndexes: file_island_proto_depIdxs,
		MessageInfos:      file_island_proto_msgTypes,
	}.Build()
	File_island_proto = out.File
	file_island_proto_rawDesc = nil
	file_island_proto_goTypes = nil
	file_island_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IslandServiceClient is the client API for IslandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IslandServiceClient interface {
	GetAllIslands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllIslandsResponse, error)
	GetIslandByID(ctx context.Context, in *GetIslandByIDRequest, opts ...grpc.CallOption) (*GetIslandByIDResponse, error)
	GetIslandsByIDs(ctx context.Context, in *GetIslandsByIDsRequest, opts ...grpc.CallOption) (*GetIslandsByIDsResponse, error)
	InsertIsland(ctx context.Context, in *InsertIslandRequest, opts ...grpc.CallOption) (*InsertIslandResponse, error)
	InsertIslands(ctx context.Context, in *InsertIslandsRequest, opts ...grpc.CallOption) (*InsertIslandsResponse, error)
	UpdateIsland(ctx context.Context, in *UpdateIslandRequest, opts ...grpc.CallOption) (*UpdateIslandResponse, error)
	UpdateIslands(ctx context.Context, in *UpdateIslandsRequest, opts ...grpc.CallOption) (*UpdateIslandsResponse, error)
	DeleteIsland(ctx context.Context, in *DeleteIslandRequest, opts ...grpc.CallOption) (*DeleteIslandResponse, error)
	DeleteIslands(ctx context.Context, in *DeleteIslandsRequest, opts ...grpc.CallOption) (*DeleteIslandsResponse, error)
}

type islandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIslandServiceClient(cc grpc.ClientConnInterface) IslandServiceClient {
	return &islandServiceClient{cc}
}

func (c *islandServiceClient) GetAllIslands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllIslandsResponse, error) {
	out := new(GetAllIslandsResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/GetAllIslands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) GetIslandByID(ctx context.Context, in *GetIslandByIDRequest, opts ...grpc.CallOption) (*GetIslandByIDResponse, error) {
	out := new(GetIslandByIDResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/GetIslandByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) GetIslandsByIDs(ctx context.Context, in *GetIslandsByIDsRequest, opts ...grpc.CallOption) (*GetIslandsByIDsResponse, error) {
	out := new(GetIslandsByIDsResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/GetIslandsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) InsertIsland(ctx context.Context, in *InsertIslandRequest, opts ...grpc.CallOption) (*InsertIslandResponse, error) {
	out := new(InsertIslandResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/InsertIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) InsertIslands(ctx context.Context, in *InsertIslandsRequest, opts ...grpc.CallOption) (*InsertIslandsResponse, error) {
	out := new(InsertIslandsResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/InsertIslands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) UpdateIsland(ctx context.Context, in *UpdateIslandRequest, opts ...grpc.CallOption) (*UpdateIslandResponse, error) {
	out := new(UpdateIslandResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/UpdateIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) UpdateIslands(ctx context.Context, in *UpdateIslandsRequest, opts ...grpc.CallOption) (*UpdateIslandsResponse, error) {
	out := new(UpdateIslandsResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/UpdateIslands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) DeleteIsland(ctx context.Context, in *DeleteIslandRequest, opts ...grpc.CallOption) (*DeleteIslandResponse, error) {
	out := new(DeleteIslandResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/DeleteIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *islandServiceClient) DeleteIslands(ctx context.Context, in *DeleteIslandsRequest, opts ...grpc.CallOption) (*DeleteIslandsResponse, error) {
	out := new(DeleteIslandsResponse)
	err := c.cc.Invoke(ctx, "/island.IslandService/DeleteIslands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IslandServiceServer is the server API for IslandService service.
type IslandServiceServer interface {
	GetAllIslands(context.Context, *emptypb.Empty) (*GetAllIslandsResponse, error)
	GetIslandByID(context.Context, *GetIslandByIDRequest) (*GetIslandByIDResponse, error)
	GetIslandsByIDs(context.Context, *GetIslandsByIDsRequest) (*GetIslandsByIDsResponse, error)
	InsertIsland(context.Context, *InsertIslandRequest) (*InsertIslandResponse, error)
	InsertIslands(context.Context, *InsertIslandsRequest) (*InsertIslandsResponse, error)
	UpdateIsland(context.Context, *UpdateIslandRequest) (*UpdateIslandResponse, error)
	UpdateIslands(context.Context, *UpdateIslandsRequest) (*UpdateIslandsResponse, error)
	DeleteIsland(context.Context, *DeleteIslandRequest) (*DeleteIslandResponse, error)
	DeleteIslands(context.Context, *DeleteIslandsRequest) (*DeleteIslandsResponse, error)
}

// UnimplementedIslandServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIslandServiceServer struct {
}

func (*UnimplementedIslandServiceServer) GetAllIslands(context.Context, *emptypb.Empty) (*GetAllIslandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIslands not implemented")
}
func (*UnimplementedIslandServiceServer) GetIslandByID(context.Context, *GetIslandByIDRequest) (*GetIslandByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIslandByID not implemented")
}
func (*UnimplementedIslandServiceServer) GetIslandsByIDs(context.Context, *GetIslandsByIDsRequest) (*GetIslandsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIslandsByIDs not implemented")
}
func (*UnimplementedIslandServiceServer) InsertIsland(context.Context, *InsertIslandRequest) (*InsertIslandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertIsland not implemented")
}
func (*UnimplementedIslandServiceServer) InsertIslands(context.Context, *InsertIslandsRequest) (*InsertIslandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertIslands not implemented")
}
func (*UnimplementedIslandServiceServer) UpdateIsland(context.Context, *UpdateIslandRequest) (*UpdateIslandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIsland not implemented")
}
func (*UnimplementedIslandServiceServer) UpdateIslands(context.Context, *UpdateIslandsRequest) (*UpdateIslandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIslands not implemented")
}
func (*UnimplementedIslandServiceServer) DeleteIsland(context.Context, *DeleteIslandRequest) (*DeleteIslandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIsland not implemented")
}
func (*UnimplementedIslandServiceServer) DeleteIslands(context.Context, *DeleteIslandsRequest) (*DeleteIslandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIslands not implemented")
}

func RegisterIslandServiceServer(s *grpc.Server, srv IslandServiceServer) {
	s.RegisterService(&_IslandService_serviceDesc, srv)
}

func _IslandService_GetAllIslands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).GetAllIslands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/GetAllIslands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).GetAllIslands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_GetIslandByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIslandByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).GetIslandByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/GetIslandByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).GetIslandByID(ctx, req.(*GetIslandByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_GetIslandsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIslandsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).GetIslandsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/GetIslandsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).GetIslandsByIDs(ctx, req.(*GetIslandsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_InsertIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertIslandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).InsertIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/InsertIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).InsertIsland(ctx, req.(*InsertIslandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_InsertIslands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertIslandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).InsertIslands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/InsertIslands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).InsertIslands(ctx, req.(*InsertIslandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_UpdateIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIslandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).UpdateIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/UpdateIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).UpdateIsland(ctx, req.(*UpdateIslandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_UpdateIslands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIslandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).UpdateIslands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/UpdateIslands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).UpdateIslands(ctx, req.(*UpdateIslandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_DeleteIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIslandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).DeleteIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/DeleteIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).DeleteIsland(ctx, req.(*DeleteIslandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IslandService_DeleteIslands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIslandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IslandServiceServer).DeleteIslands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/island.IslandService/DeleteIslands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IslandServiceServer).DeleteIslands(ctx, req.(*DeleteIslandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IslandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "island.IslandService",
	HandlerType: (*IslandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllIslands",
			Handler:    _IslandService_GetAllIslands_Handler,
		},
		{
			MethodName: "GetIslandByID",
			Handler:    _IslandService_GetIslandByID_Handler,
		},
		{
			MethodName: "GetIslandsByIDs",
			Handler:    _IslandService_GetIslandsByIDs_Handler,
		},
		{
			MethodName: "InsertIsland",
			Handler:    _IslandService_InsertIsland_Handler,
		},
		{
			MethodName: "InsertIslands",
			Handler:    _IslandService_InsertIslands_Handler,
		},
		{
			MethodName: "UpdateIsland",
			Handler:    _IslandService_UpdateIsland_Handler,
		},
		{
			MethodName: "UpdateIslands",
			Handler:    _IslandService_UpdateIslands_Handler,
		},
		{
			MethodName: "DeleteIsland",
			Handler:    _IslandService_DeleteIsland_Handler,
		},
		{
			MethodName: "DeleteIslands",
			Handler:    _IslandService_DeleteIslands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "island.proto",
}
